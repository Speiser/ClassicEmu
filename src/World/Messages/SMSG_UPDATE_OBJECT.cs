using Classic.Common;
using Classic.Data;
using System;

namespace Classic.World.Messages
{
    public class SMSG_UPDATE_OBJECT : ServerMessageBase<Opcode>
    {
        private readonly Character character;

        public SMSG_UPDATE_OBJECT(Character character) : base(Opcode.SMSG_UPDATE_OBJECT)
        {
            this.character = character;
        }

        public override byte[] Get()
        {
            this.Writer
                .WriteUInt8(3) // UPDATETYPE_CREATE_OBJECT_SELF
                .WriteBytes(this.character.ID.ToPackedUInt64())
                .WriteUInt8(4) // TypeidPlayer
                .WriteUInt8(0x0010 | 0x0040 | 0x0020 | 0x0001) // Update flag
                .WriteUInt32(0x00000000) // Movement flag
                .WriteUInt32((uint)Environment.TickCount)

                .WriteFloat(-8919.284180F) // MapX
                .WriteFloat(-117.894028F) // MapY
                .WriteFloat(82.339821F) // MapZ
                .WriteFloat(1F) // MapO (Orientation)

                .WriteFloat(0) // ???
                .WriteFloat(2.5f) // WalkSpeed
                .WriteFloat(7f * 1) // RunSpeed
                .WriteFloat(2.5f) // Backwards WalkSpeed
                .WriteFloat(4.7222f) // SwimSpeed
                .WriteFloat(2.5f) // Backwards SwimSpeed
                .WriteFloat(3.14f) // TurnSpeed

                .WriteInt32(0x1) // ???

                .WriteBytes(
                    // https://www.ownedcore.com/forums/world-of-warcraft/world-of-warcraft-emulator-servers/wow-emu-questions-requests/390468-smsg_update_object-documentation.html
                    // ^ TODO: also contains description of all fields
                    0x2a, // Mask Size ((1326 + 31) / 32 = 42)

                    // Values Update Mask
                    0b00010111, 0x00, 0x80, 0x01, 0x01, 0x00, 0b11000000, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                    // Update Values:
                    0x01, 0x02, 0x03, 0x00,  // OBJECT_FIELD_GUID Low GUID [Required]
                    0x00, 0x00, 0x00, 0x00,  // OBJECT_FIELD_GUID High GUID [Required]
                    0x19, 0x00, 0x00, 0x00,  // OBJECT_FIELD_TYPE -> unit | player | object
                    0x00, 0x00, 0x80, 0x3f,  // OBJECT_FIELD_SCALE_X 
                    0x01, 0x01, 0x01, 0x01,  // UNIT_FIELD_BYTES_0 Race(Human), Class(Warrior), Gender(Female), PowerType(Rage)
                    0x3c, 0x00, 0x00, 0x00,  // UNIT_FIELD_HEALTH 
                    0x3c, 0x00, 0x00, 0x00,  // UNIT_FIELD_MAXHEALTH
                    0x01, 0x00, 0x00, 0x00,  // UNIT_FIELD_LEVEL
                    0x01, 0x00, 0x00, 0x00,  // UNIT_FIELD_FACTIONTEMPLATE [Required]
                    0x0c, 0x4d, 0x00, 0x00,  // UNIT_FIELD_DISPLAYID (Human Female = 19724) [Required]
                    0x0c, 0x4d, 0x00, 0x00); // UNIT_FIELD_NATIVEDISPLAYID (Human Female = 19724) [Required])

            return this.Writer.Build();
        }
    }
}